version: "2.4"
services:
  web:
    # the application's web service (container) will use an image based on our Dockerfile
    build: "."
    # map the internal port 80 to port 8000 on the host
    ports:
      - "8000:80"
    # map the host directory to app (which allows us to see and edit files inside the container)
    volumes:
      - ".:/app:rw"
      - "./data:/data:rw"
    # the default command to run whenever the container is launched
    command: python manage.py runserver 0.0.0.0:80
    # the URL 'postgres' or 'mysql' will point to the application's db service
    links:
      - "database_default"
    env_file: .env-local
    depends_on:
      - database_default
      - rabbitmq
      - celeryworker
      - celerybeat

  database_default:
    # Select one of the following db configurations for the database
    image: postgres:9.6-alpine
    environment:
      POSTGRES_DB: "db"
      POSTGRES_HOST_AUTH_METHOD: "trust"
      SERVICE_MANAGER: "fsm-postgres"
    volumes:
      - ".:/app:rw"

  rabbitmq:
    image: rabbitmq:3.5-management
    hostname: rabbitmq
    ports:
      - "15672:15672"
    expose:
      - "15672"
    environment:
      RABBITMQ_ERLANG_COOKIE: secret_cookie_value

  celeryworker:
    build: "."
    links:
      - "database_default:postgres"  # the actual value will depend on your project's database
      - "rabbitmq:rabbitmq"
    volumes:
      - ".:/app:rw"
      - "./data:/data:rw"
    command: aldryn-celery worker
    env_file: .env-local

  celerybeat:
    build: "."
    links:
      - "database_default:postgres"  # the actual value will depend on your project's database
      - "rabbitmq:rabbitmq"
    volumes:
      - ".:/app:rw"
      - "./data:/data:rw"
    command: aldryn-celery beat
    env_file: .env-local
